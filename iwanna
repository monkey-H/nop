u#!/bin/bash
set -x
args=$*
APP="$(echo $2 | sed "s/'//g")"

#apps in /home/iwanna/apps and git repository in /home/iwanna/gits
[ -d /home/iwanna/gits ] || (mkdir /home/iwanna/gits)
[ -d /home/iwanna/apps ] || (mkdir /home/iwanna/apps)
GITDIR=/home/iwanna/gits
APPDIR=/home/iwanna/apps

#judge if app git exist, if not git init or nothing
[ -d $GITDIR/$APP ] || (mkdir $GITDIR/$APP && git init --bare $GITDIR/$APP > /dev/null)

git-shell -c "$1 'gits/$APP'"

#judge if app exist, if not clone, or how?
if [ -d $APPDIR/$APP ]; then
	cd $APPDIR/$APP
	update_new=$(git pull)
	cd  
	if [ "$update_new" = "Already up-to-date." ]; then
		if [ $(etcdctl get /services/coreos1/$APP) ]; then
			ipport_etcd=$(etcdctl get /services/coreos1/$APP)
			exit
		elif [ $(etcdctl get /services/coreos2/$APP) ]; then
			ipport_etcd=$(etcdctl get /services/coreos2/$APP)
                        exit
		elif [ $(etcdctl get /services/coreos3/$APP) ]; then
			ipport_etcd=$(etcdctl get /services/coreos3/$APP)
                        exit
		else
			sudo rm -r $APPDIR/$APP
			mkdir $APPDIR/$APP
			git clone $GITDIR/$APP $APPDIR/$APP
		fi
	else
		sudo rm -r $APPDIR/$APP
		mkdir $ADDDIR/$APP
		git clone $GITDIR/$APP $APPDIR/$APP
	fi
else
	mkdir $APPDIR/$APP
	git clone $GITDIR/$APP $APPDIR/$APP
fi

WORKDIR=/etc/systemd/system
RIGISTRY="docker.iwanna.xyz:5000/hmonkey"

#build unit, destroy app and app_discovery, then build image and push it

sudo touch $WORKDIR/BUILD_${APP}.service
BUILD_SERVICE="$WORKDIR/BUILD_${APP}.service"
sudo chmod o+w $BUILD_SERVICE

if [ ! -f $APPDIR/$APP/Dockerfile ]; then
	if [ -f $APPDIR/$APP/pom.xml ]; then
		sudo touch $APPDIR/$APP/Dockerfile
		sudo chmod o+w $APPDIR/$APP/Dockerfile
		cat > $APPDIR/$APP/Dockerfile <<EOF
FROM docker.iwanna.xyz:5000/hmonkey/maven
MAINTAINER hmonkey <5681713@qq.com>

COPY pom.xml /app/pom.xml
COPY src /app/src
COPY profile /app/profile
COPY data /app/data
WORKDIR /app
RUN mvn package
ENTRYPOINT ["sh", "/app/profile"]
EOF
	else 
		echo "anything else"
	fi
fi


cat > $BUILD_SERVICE <<EOF
[Unit]
Description=${APP}_build
Requires=docker.service
After=docker.service

[Service]
ExecStartPre=-/usr/bin/fleetctl destroy $APP.service
ExecStartPre=-/usr/bin/fleetctl destroy ${APP}_discovery.service
ExecStartPre=/usr/bin/docker build -t $RIGISTRY/${APP}_image $APPDIR/$APP
ExecStart=/usr/bin/docker push $RIGISTRY/${APP}_image

[Install]
WantedBy=multi-user.target
EOF

#run unit, pull image and run it

sudo touch $WORKDIR/$APP.service
SERVICE="$WORKDIR/$APP.service"
sudo chmod o+w $SERVICE
cat > $SERVICE <<EOF
[Unit]
Description=${APP}
Requires=docker.service
After=docker.service

[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker stop $APP
ExecStartPre=-/usr/bin/docker rm $APP
ExecStartPre=-/usr/bin/docker pull $RIGISTRY/${APP}_image
ExecStart=/usr/bin/docker run --rm -P --name $APP $RIGISTRY/${APP}_image
ExecStop=/usr/bin/docker stop $APP

EOF

#discovery unit, by machineof find the run unit, and write ip and port to etcd

sudo touch $WORKDIR/${APP}_discovery.service
DISCOVERY="$WORKDIR/${APP}_discovery.service"
sudo chmod o+w $DISCOVERY
cat > $DISCOVERY <<EOF
[Unit]
Description=${APP}_discovery
After=$APP.service

[Service]
ExecStart=/bin/sh -c "while true; do appport=\$(docker inspect --format='{{range \$p, \$conf := .NetworkSettings.Ports}}{{(index \$conf 0).HostPort}}{{end}}' $APP); etcdctl set /services/\"%H\"/$APP '{\"host\": \"%H\", \"port\": '\$appport'}' --ttl 60; sleep 45; done"
ExecStop=/usr/bin/etcdctl rm /services/"%H"/$APP

[X-Fleet]
MachineOf=$APP.service
EOF

#buid and push

sudo systemctl enable $BUILD_SERVICE
sudo systemctl daemon-reload
sudo systemctl start BUILD_${APP}.service

#start app unit and discovery unit

fleetctl submit $WORKDIR/$APP.service $WORKDIR/${APP}_discovery.service
fleetctl start $WORKDIR/$APP.service > /dev/null
fleetctl start $WORKDIR/${APP}_discovery.service > /dev/null

#wait 30sec for writing to etcd finished

sleep 30
hello=$(etcdctl ls /services/coreos1)
world=$(etcdctl get $hello)
echo world

